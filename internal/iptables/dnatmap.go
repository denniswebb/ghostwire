package iptables

import (
	"fmt"
	"log/slog"
	"os"

	"github.com/denniswebb/ghostwire/internal/discovery"
)

// WriteDNATMap records the resolved DNAT mappings to an audit file.
func WriteDNATMap(path string, mappings []discovery.ServiceMapping, logger *slog.Logger) (err error) {
	// #nosec G304 - path is provided by operator configuration and must be user-writable.
	file, err := os.OpenFile(path, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0o600)
	if err != nil {
		return fmt.Errorf("open dnat map %s: %w", path, err)
	}
	defer func() {
		if cerr := file.Close(); cerr != nil && err == nil {
			err = fmt.Errorf("close dnat map file: %w", cerr)
		}
	}()

	if _, err := fmt.Fprintln(file, "# DNAT mappings generated by ghostwire-init"); err != nil {
		return fmt.Errorf("write dnat map header: %w", err)
	}
	if _, err := fmt.Fprintln(file, "# Format: service:port/protocol active_ip -> preview_ip"); err != nil {
		return fmt.Errorf("write dnat map header: %w", err)
	}

	for _, mapping := range mappings {
		if _, err := fmt.Fprintf(file, "%s:%d/%s %s -> %s\n", mapping.ServiceName, mapping.Port, mapping.Protocol, mapping.ActiveClusterIP, mapping.PreviewClusterIP); err != nil {
			return fmt.Errorf("write dnat map entry for %s: %w", mapping.ServiceName, err)
		}
	}

	logger.Info("wrote dnat map", slog.String("path", path), slog.Int("mappings", len(mappings)))
	return nil
}
